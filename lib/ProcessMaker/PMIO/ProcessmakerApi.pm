=begin comment

ProcessMaker API

This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.

OpenAPI spec version: 1.0.0
Contact: support@processmaker.io
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package ProcessMaker::PMIO::ProcessmakerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use ProcessMaker::PMIO::ApiClient;
use ProcessMaker::PMIO::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => ProcessMaker::PMIO::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# add_client
#
# 
# 
# @param string $user_id ID of the user related to the Oauth client (required)
# @param ClientCreateItem $client_create_item JSON API with the Oauth Client object to add (required)
{
    my $params = {
    'user_id' => {
        data_type => 'string',
        description => 'ID of the user related to the Oauth client',
        required => '1',
    },
    'client_create_item' => {
        data_type => 'ClientCreateItem',
        description => 'JSON API with the Oauth Client object to add',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_client' } = { 
    	summary => '',
        params => $params,
        returns => 'ClientItem',
        };
}
# @return ClientItem
#
sub add_client {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling add_client");
    }

    # verify the required parameter 'client_create_item' is set
    unless (exists $args{'client_create_item'}) {
      croak("Missing the required parameter 'client_create_item' when calling add_client");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/clients';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'client_create_item'}) {
        $_body_data = $args{'client_create_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ClientItem', $response);
    return $_response_object;
}

#
# add_event
#
# 
# 
# @param string $process_id ID of the process related to the event (required)
# @param EventCreateItem $event_create_item JSON API response with the Event object to add (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of the process related to the event',
        required => '1',
    },
    'event_create_item' => {
        data_type => 'EventCreateItem',
        description => 'JSON API response with the Event object to add',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_event' } = { 
    	summary => '',
        params => $params,
        returns => 'EventItem',
        };
}
# @return EventItem
#
sub add_event {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling add_event");
    }

    # verify the required parameter 'event_create_item' is set
    unless (exists $args{'event_create_item'}) {
      croak("Missing the required parameter 'event_create_item' when calling add_event");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/events';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'event_create_item'}) {
        $_body_data = $args{'event_create_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EventItem', $response);
    return $_response_object;
}

#
# add_event_connector
#
# 
# 
# @param string $process_id ID of Process to fetch (required)
# @param string $event_id ID of Event to fetch (required)
# @param EventConnectorCreateItem $event_connector_create_item JSON API with the EventConnector object to add (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of Process to fetch',
        required => '1',
    },
    'event_id' => {
        data_type => 'string',
        description => 'ID of Event to fetch',
        required => '1',
    },
    'event_connector_create_item' => {
        data_type => 'EventConnectorCreateItem',
        description => 'JSON API with the EventConnector object to add',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_event_connector' } = { 
    	summary => '',
        params => $params,
        returns => 'EventConnector1',
        };
}
# @return EventConnector1
#
sub add_event_connector {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling add_event_connector");
    }

    # verify the required parameter 'event_id' is set
    unless (exists $args{'event_id'}) {
      croak("Missing the required parameter 'event_id' when calling add_event_connector");
    }

    # verify the required parameter 'event_connector_create_item' is set
    unless (exists $args{'event_connector_create_item'}) {
      croak("Missing the required parameter 'event_connector_create_item' when calling add_event_connector");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/events/{event_id}/connectors';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'event_id'}) {
        my $_base_variable = "{" . "event_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'event_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'event_connector_create_item'}) {
        $_body_data = $args{'event_connector_create_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EventConnector1', $response);
    return $_response_object;
}

#
# add_flow
#
# 
# 
# @param string $process_id ID of the process related to the flow (required)
# @param FlowCreateItem $flow_create_item JSON API response with the Flow object to add (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of the process related to the flow',
        required => '1',
    },
    'flow_create_item' => {
        data_type => 'FlowCreateItem',
        description => 'JSON API response with the Flow object to add',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_flow' } = { 
    	summary => '',
        params => $params,
        returns => 'FlowItem',
        };
}
# @return FlowItem
#
sub add_flow {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling add_flow");
    }

    # verify the required parameter 'flow_create_item' is set
    unless (exists $args{'flow_create_item'}) {
      croak("Missing the required parameter 'flow_create_item' when calling add_flow");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/flows';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'flow_create_item'}) {
        $_body_data = $args{'flow_create_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('FlowItem', $response);
    return $_response_object;
}

#
# add_gateway
#
# 
# 
# @param string $process_id ID of the process related to the gateway (required)
# @param GatewayCreateItem $gateway_create_item JSON API response with the gateway object to add (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of the process related to the gateway',
        required => '1',
    },
    'gateway_create_item' => {
        data_type => 'GatewayCreateItem',
        description => 'JSON API response with the gateway object to add',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_gateway' } = { 
    	summary => '',
        params => $params,
        returns => 'GatewayItem',
        };
}
# @return GatewayItem
#
sub add_gateway {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling add_gateway");
    }

    # verify the required parameter 'gateway_create_item' is set
    unless (exists $args{'gateway_create_item'}) {
      croak("Missing the required parameter 'gateway_create_item' when calling add_gateway");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/gateways';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'gateway_create_item'}) {
        $_body_data = $args{'gateway_create_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GatewayItem', $response);
    return $_response_object;
}

#
# add_group
#
# 
# 
# @param GroupCreateItem $group_create_item JSON API with the Group object to add (required)
{
    my $params = {
    'group_create_item' => {
        data_type => 'GroupCreateItem',
        description => 'JSON API with the Group object to add',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_group' } = { 
    	summary => '',
        params => $params,
        returns => 'GroupItem',
        };
}
# @return GroupItem
#
sub add_group {
    my ($self, %args) = @_;

    # verify the required parameter 'group_create_item' is set
    unless (exists $args{'group_create_item'}) {
      croak("Missing the required parameter 'group_create_item' when calling add_group");
    }

    # parse inputs
    my $_resource_path = '/groups';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    my $_body_data;
    # body params
    if ( exists $args{'group_create_item'}) {
        $_body_data = $args{'group_create_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GroupItem', $response);
    return $_response_object;
}

#
# add_groups_to_task
#
# 
# 
# @param string $process_id Process ID (required)
# @param string $task_id ID of task to be modified (required)
# @param TaskAddGroupsItem $task_add_groups_item JSON API with Groups ID&#39;s to add (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'Process ID',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'ID of task to be modified',
        required => '1',
    },
    'task_add_groups_item' => {
        data_type => 'TaskAddGroupsItem',
        description => 'JSON API with Groups ID&#39;s to add',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_groups_to_task' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub add_groups_to_task {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling add_groups_to_task");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling add_groups_to_task");
    }

    # verify the required parameter 'task_add_groups_item' is set
    unless (exists $args{'task_add_groups_item'}) {
      croak("Missing the required parameter 'task_add_groups_item' when calling add_groups_to_task");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks/{task_id}/groups';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'task_add_groups_item'}) {
        $_body_data = $args{'task_add_groups_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# add_input_output
#
# 
# 
# @param string $process_id Process ID related to Input/Output object (required)
# @param string $task_id Task instance ID related to Input/Output object (required)
# @param InputOutputCreateItem $input_output_create_item Create and add a new Input/Output object with JSON API (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'Process ID related to Input/Output object',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'Task instance ID related to Input/Output object',
        required => '1',
    },
    'input_output_create_item' => {
        data_type => 'InputOutputCreateItem',
        description => 'Create and add a new Input/Output object with JSON API',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_input_output' } = { 
    	summary => '',
        params => $params,
        returns => 'InputOutputItem',
        };
}
# @return InputOutputItem
#
sub add_input_output {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling add_input_output");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling add_input_output");
    }

    # verify the required parameter 'input_output_create_item' is set
    unless (exists $args{'input_output_create_item'}) {
      croak("Missing the required parameter 'input_output_create_item' when calling add_input_output");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks/{task_id}/inputoutput';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'input_output_create_item'}) {
        $_body_data = $args{'input_output_create_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InputOutputItem', $response);
    return $_response_object;
}

#
# add_instance
#
# 
# 
# @param string $process_id Process ID related to the nstance (required)
# @param InstanceCreateItem $instance_create_item JSON API response with the Instance object to add (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'Process ID related to the nstance',
        required => '1',
    },
    'instance_create_item' => {
        data_type => 'InstanceCreateItem',
        description => 'JSON API response with the Instance object to add',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_instance' } = { 
    	summary => '',
        params => $params,
        returns => 'InstanceItem',
        };
}
# @return InstanceItem
#
sub add_instance {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling add_instance");
    }

    # verify the required parameter 'instance_create_item' is set
    unless (exists $args{'instance_create_item'}) {
      croak("Missing the required parameter 'instance_create_item' when calling add_instance");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/instances';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'instance_create_item'}) {
        $_body_data = $args{'instance_create_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InstanceItem', $response);
    return $_response_object;
}

#
# add_process
#
# 
# 
# @param ProcessCreateItem $process_create_item JSON API response with the Process object to add (required)
{
    my $params = {
    'process_create_item' => {
        data_type => 'ProcessCreateItem',
        description => 'JSON API response with the Process object to add',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_process' } = { 
    	summary => '',
        params => $params,
        returns => 'ProcessItem',
        };
}
# @return ProcessItem
#
sub add_process {
    my ($self, %args) = @_;

    # verify the required parameter 'process_create_item' is set
    unless (exists $args{'process_create_item'}) {
      croak("Missing the required parameter 'process_create_item' when calling add_process");
    }

    # parse inputs
    my $_resource_path = '/processes';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    my $_body_data;
    # body params
    if ( exists $args{'process_create_item'}) {
        $_body_data = $args{'process_create_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ProcessItem', $response);
    return $_response_object;
}

#
# add_task
#
# 
# 
# @param string $process_id Process ID related to the task (required)
# @param TaskCreateItem $task_create_item JSON API with the Task object to add (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'Process ID related to the task',
        required => '1',
    },
    'task_create_item' => {
        data_type => 'TaskCreateItem',
        description => 'JSON API with the Task object to add',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_task' } = { 
    	summary => '',
        params => $params,
        returns => 'TaskItem',
        };
}
# @return TaskItem
#
sub add_task {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling add_task");
    }

    # verify the required parameter 'task_create_item' is set
    unless (exists $args{'task_create_item'}) {
      croak("Missing the required parameter 'task_create_item' when calling add_task");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'task_create_item'}) {
        $_body_data = $args{'task_create_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TaskItem', $response);
    return $_response_object;
}

#
# add_task_connector
#
# 
# 
# @param string $process_id ID of Process to fetch (required)
# @param string $task_id ID of Task to fetch (required)
# @param TaskConnectorCreateItem $task_connector_create_item JSON API with the TaskConnector object to add (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of Process to fetch',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'ID of Task to fetch',
        required => '1',
    },
    'task_connector_create_item' => {
        data_type => 'TaskConnectorCreateItem',
        description => 'JSON API with the TaskConnector object to add',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_task_connector' } = { 
    	summary => '',
        params => $params,
        returns => 'TaskConnector1',
        };
}
# @return TaskConnector1
#
sub add_task_connector {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling add_task_connector");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling add_task_connector");
    }

    # verify the required parameter 'task_connector_create_item' is set
    unless (exists $args{'task_connector_create_item'}) {
      croak("Missing the required parameter 'task_connector_create_item' when calling add_task_connector");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks/{task_id}/connectors';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'task_connector_create_item'}) {
        $_body_data = $args{'task_connector_create_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TaskConnector1', $response);
    return $_response_object;
}

#
# add_user
#
# 
# 
# @param UserCreateItem $user_create_item JSON API with the User object to add (required)
{
    my $params = {
    'user_create_item' => {
        data_type => 'UserCreateItem',
        description => 'JSON API with the User object to add',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_user' } = { 
    	summary => '',
        params => $params,
        returns => 'UserItem',
        };
}
# @return UserItem
#
sub add_user {
    my ($self, %args) = @_;

    # verify the required parameter 'user_create_item' is set
    unless (exists $args{'user_create_item'}) {
      croak("Missing the required parameter 'user_create_item' when calling add_user");
    }

    # parse inputs
    my $_resource_path = '/users';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    my $_body_data;
    # body params
    if ( exists $args{'user_create_item'}) {
        $_body_data = $args{'user_create_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UserItem', $response);
    return $_response_object;
}

#
# add_users_to_group
#
# 
# 
# @param string $id ID of group to be modified (required)
# @param GroupAddUsersItem $group_add_users_item JSON API response with array of users ID&#39;s (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of group to be modified',
        required => '1',
    },
    'group_add_users_item' => {
        data_type => 'GroupAddUsersItem',
        description => 'JSON API response with array of users ID&#39;s',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_users_to_group' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub add_users_to_group {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling add_users_to_group");
    }

    # verify the required parameter 'group_add_users_item' is set
    unless (exists $args{'group_add_users_item'}) {
      croak("Missing the required parameter 'group_add_users_item' when calling add_users_to_group");
    }

    # parse inputs
    my $_resource_path = '/groups/{id}/users';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'group_add_users_item'}) {
        $_body_data = $args{'group_add_users_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# delete_client
#
# 
# 
# @param string $user_id User ID (required)
# @param string $client_id ID of client to delete (required)
{
    my $params = {
    'user_id' => {
        data_type => 'string',
        description => 'User ID',
        required => '1',
    },
    'client_id' => {
        data_type => 'string',
        description => 'ID of client to delete',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_client' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub delete_client {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling delete_client");
    }

    # verify the required parameter 'client_id' is set
    unless (exists $args{'client_id'}) {
      croak("Missing the required parameter 'client_id' when calling delete_client");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/clients/{client_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'client_id'}) {
        my $_base_variable = "{" . "client_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'client_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# delete_event
#
# 
# 
# @param string $process_id Process ID (required)
# @param string $event_id ID of event to delete (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'Process ID',
        required => '1',
    },
    'event_id' => {
        data_type => 'string',
        description => 'ID of event to delete',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_event' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub delete_event {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling delete_event");
    }

    # verify the required parameter 'event_id' is set
    unless (exists $args{'event_id'}) {
      croak("Missing the required parameter 'event_id' when calling delete_event");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/events/{event_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'event_id'}) {
        my $_base_variable = "{" . "event_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'event_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# delete_event_connector
#
# 
# 
# @param string $process_id ID of of Process item (required)
# @param string $event_id ID of item to fetch (required)
# @param string $connector_id ID of EventConnector to fetch (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of of Process item',
        required => '1',
    },
    'event_id' => {
        data_type => 'string',
        description => 'ID of item to fetch',
        required => '1',
    },
    'connector_id' => {
        data_type => 'string',
        description => 'ID of EventConnector to fetch',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_event_connector' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub delete_event_connector {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling delete_event_connector");
    }

    # verify the required parameter 'event_id' is set
    unless (exists $args{'event_id'}) {
      croak("Missing the required parameter 'event_id' when calling delete_event_connector");
    }

    # verify the required parameter 'connector_id' is set
    unless (exists $args{'connector_id'}) {
      croak("Missing the required parameter 'connector_id' when calling delete_event_connector");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/events/{event_id}/connectors/{connector_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'event_id'}) {
        my $_base_variable = "{" . "event_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'event_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'connector_id'}) {
        my $_base_variable = "{" . "connector_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'connector_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# delete_flow
#
# 
# 
# @param string $process_id Process ID (required)
# @param string $flow_id ID of flow to delete (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'Process ID',
        required => '1',
    },
    'flow_id' => {
        data_type => 'string',
        description => 'ID of flow to delete',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_flow' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub delete_flow {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling delete_flow");
    }

    # verify the required parameter 'flow_id' is set
    unless (exists $args{'flow_id'}) {
      croak("Missing the required parameter 'flow_id' when calling delete_flow");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/flows/{flow_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'flow_id'}) {
        my $_base_variable = "{" . "flow_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'flow_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# delete_gateway
#
# 
# 
# @param string $process_id Process ID (required)
# @param string $gateway_id ID of Process to delete (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'Process ID',
        required => '1',
    },
    'gateway_id' => {
        data_type => 'string',
        description => 'ID of Process to delete',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_gateway' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub delete_gateway {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling delete_gateway");
    }

    # verify the required parameter 'gateway_id' is set
    unless (exists $args{'gateway_id'}) {
      croak("Missing the required parameter 'gateway_id' when calling delete_gateway");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/gateways/{gateway_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'gateway_id'}) {
        my $_base_variable = "{" . "gateway_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'gateway_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# delete_group
#
# 
# 
# @param string $id ID of group to delete (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of group to delete',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_group' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub delete_group {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_group");
    }

    # parse inputs
    my $_resource_path = '/groups/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# delete_input_output
#
# 
# 
# @param string $process_id Process ID related to the Input/Output object (required)
# @param string $task_id Task instance ID related to Input/Output object (required)
# @param string $inputoutput_uid Input/Output ID to fetch (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'Process ID related to the Input/Output object',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'Task instance ID related to Input/Output object',
        required => '1',
    },
    'inputoutput_uid' => {
        data_type => 'string',
        description => 'Input/Output ID to fetch',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_input_output' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub delete_input_output {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling delete_input_output");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling delete_input_output");
    }

    # verify the required parameter 'inputoutput_uid' is set
    unless (exists $args{'inputoutput_uid'}) {
      croak("Missing the required parameter 'inputoutput_uid' when calling delete_input_output");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'inputoutput_uid'}) {
        my $_base_variable = "{" . "inputoutput_uid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inputoutput_uid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# delete_instance
#
# 
# 
# @param string $process_id Process ID (required)
# @param string $instance_id ID of instance to delete (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'Process ID',
        required => '1',
    },
    'instance_id' => {
        data_type => 'string',
        description => 'ID of instance to delete',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_instance' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub delete_instance {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling delete_instance");
    }

    # verify the required parameter 'instance_id' is set
    unless (exists $args{'instance_id'}) {
      croak("Missing the required parameter 'instance_id' when calling delete_instance");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/instances/{instance_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'instance_id'}) {
        my $_base_variable = "{" . "instance_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# delete_process
#
# 
# 
# @param string $id Process ID to delete (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Process ID to delete',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_process' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub delete_process {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_process");
    }

    # parse inputs
    my $_resource_path = '/processes/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# delete_task
#
# 
# 
# @param string $process_id Process ID (required)
# @param string $task_id ID of task to delete (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'Process ID',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'ID of task to delete',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_task' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub delete_task {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling delete_task");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling delete_task");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks/{task_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# delete_task_connector
#
# 
# 
# @param string $process_id ID of Process item to fetch (required)
# @param string $task_id ID of Task item to fetch (required)
# @param string $connector_id ID of TaskConnector to fetch (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of Process item to fetch',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'ID of Task item to fetch',
        required => '1',
    },
    'connector_id' => {
        data_type => 'string',
        description => 'ID of TaskConnector to fetch',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_task_connector' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub delete_task_connector {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling delete_task_connector");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling delete_task_connector");
    }

    # verify the required parameter 'connector_id' is set
    unless (exists $args{'connector_id'}) {
      croak("Missing the required parameter 'connector_id' when calling delete_task_connector");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'connector_id'}) {
        my $_base_variable = "{" . "connector_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'connector_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# delete_user
#
# 
# 
# @param string $id ID of user to delete (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of user to delete',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_user' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub delete_user {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_user");
    }

    # parse inputs
    my $_resource_path = '/users/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# event_trigger
#
# 
# 
# @param string $process_id Process ID related to the event (required)
# @param string $event_id ID of event to trigger (required)
# @param TriggerEventCreateItem $trigger_event_create_item Json with some parameters (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'Process ID related to the event',
        required => '1',
    },
    'event_id' => {
        data_type => 'string',
        description => 'ID of event to trigger',
        required => '1',
    },
    'trigger_event_create_item' => {
        data_type => 'TriggerEventCreateItem',
        description => 'Json with some parameters',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'event_trigger' } = { 
    	summary => '',
        params => $params,
        returns => 'DataModelItem1',
        };
}
# @return DataModelItem1
#
sub event_trigger {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling event_trigger");
    }

    # verify the required parameter 'event_id' is set
    unless (exists $args{'event_id'}) {
      croak("Missing the required parameter 'event_id' when calling event_trigger");
    }

    # verify the required parameter 'trigger_event_create_item' is set
    unless (exists $args{'trigger_event_create_item'}) {
      croak("Missing the required parameter 'trigger_event_create_item' when calling event_trigger");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/events/{event_id}/trigger';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'event_id'}) {
        my $_base_variable = "{" . "event_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'event_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'trigger_event_create_item'}) {
        $_body_data = $args{'trigger_event_create_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DataModelItem1', $response);
    return $_response_object;
}

#
# find_client_by_id
#
# 
# 
# @param string $user_id ID of user to retrieve (required)
# @param string $client_id ID of client to retrieve (required)
{
    my $params = {
    'user_id' => {
        data_type => 'string',
        description => 'ID of user to retrieve',
        required => '1',
    },
    'client_id' => {
        data_type => 'string',
        description => 'ID of client to retrieve',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_client_by_id' } = { 
    	summary => '',
        params => $params,
        returns => 'ClientItem',
        };
}
# @return ClientItem
#
sub find_client_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling find_client_by_id");
    }

    # verify the required parameter 'client_id' is set
    unless (exists $args{'client_id'}) {
      croak("Missing the required parameter 'client_id' when calling find_client_by_id");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/clients/{client_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'client_id'}) {
        my $_base_variable = "{" . "client_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'client_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ClientItem', $response);
    return $_response_object;
}

#
# find_clients
#
# 
# 
# @param string $user_id User ID related to the clients (required)
# @param int $pagefind_process_by_id Page numbers to fetch (optional, default to 1)
# @param int $per_page Amount of items per page (optional, default to 15)
{
    my $params = {
    'user_id' => {
        data_type => 'string',
        description => 'User ID related to the clients',
        required => '1',
    },
    'pagefind_process_by_id' => {
        data_type => 'int',
        description => 'Page numbers to fetch',
        required => '0',
    },
    'per_page' => {
        data_type => 'int',
        description => 'Amount of items per page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_clients' } = { 
    	summary => '',
        params => $params,
        returns => 'ClientCollection',
        };
}
# @return ClientCollection
#
sub find_clients {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling find_clients");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/clients';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # query params
    if ( exists $args{'pagefind_process_by_id'}) {
        $query_params->{'pagefindProcessById'} = $self->{api_client}->to_query_value($args{'pagefind_process_by_id'});
    }

    # query params
    if ( exists $args{'per_page'}) {
        $query_params->{'per_page'} = $self->{api_client}->to_query_value($args{'per_page'});
    }

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ClientCollection', $response);
    return $_response_object;
}

#
# find_data_model
#
# 
# 
# @param string $process_id ID of process to return (required)
# @param string $instance_id ID of instance to return (required)
# @param int $page Page number to fetch (optional, default to 1)
# @param int $per_page Amount of items per Page (optional, default to 15)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of process to return',
        required => '1',
    },
    'instance_id' => {
        data_type => 'string',
        description => 'ID of instance to return',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Page number to fetch',
        required => '0',
    },
    'per_page' => {
        data_type => 'int',
        description => 'Amount of items per Page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_data_model' } = { 
    	summary => '',
        params => $params,
        returns => 'DataModelItem1',
        };
}
# @return DataModelItem1
#
sub find_data_model {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling find_data_model");
    }

    # verify the required parameter 'instance_id' is set
    unless (exists $args{'instance_id'}) {
      croak("Missing the required parameter 'instance_id' when calling find_data_model");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/instances/{instance_id}/datamodel';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'per_page'}) {
        $query_params->{'per_page'} = $self->{api_client}->to_query_value($args{'per_page'});
    }

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'instance_id'}) {
        my $_base_variable = "{" . "instance_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DataModelItem1', $response);
    return $_response_object;
}

#
# find_event_by_id
#
# 
# 
# @param string $process_id ID of process to return (required)
# @param string $event_id ID of event to return (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of process to return',
        required => '1',
    },
    'event_id' => {
        data_type => 'string',
        description => 'ID of event to return',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_event_by_id' } = { 
    	summary => '',
        params => $params,
        returns => 'EventItem',
        };
}
# @return EventItem
#
sub find_event_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling find_event_by_id");
    }

    # verify the required parameter 'event_id' is set
    unless (exists $args{'event_id'}) {
      croak("Missing the required parameter 'event_id' when calling find_event_by_id");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/events/{event_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'event_id'}) {
        my $_base_variable = "{" . "event_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'event_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EventItem', $response);
    return $_response_object;
}

#
# find_event_connector_by_id
#
# 
# 
# @param string $process_id ID of Process to fetch (required)
# @param string $event_id ID of Event to fetch (required)
# @param string $connector_id ID of EventConnector to fetch (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of Process to fetch',
        required => '1',
    },
    'event_id' => {
        data_type => 'string',
        description => 'ID of Event to fetch',
        required => '1',
    },
    'connector_id' => {
        data_type => 'string',
        description => 'ID of EventConnector to fetch',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_event_connector_by_id' } = { 
    	summary => '',
        params => $params,
        returns => 'EventConnector1',
        };
}
# @return EventConnector1
#
sub find_event_connector_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling find_event_connector_by_id");
    }

    # verify the required parameter 'event_id' is set
    unless (exists $args{'event_id'}) {
      croak("Missing the required parameter 'event_id' when calling find_event_connector_by_id");
    }

    # verify the required parameter 'connector_id' is set
    unless (exists $args{'connector_id'}) {
      croak("Missing the required parameter 'connector_id' when calling find_event_connector_by_id");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/events/{event_id}/connectors/{connector_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'event_id'}) {
        my $_base_variable = "{" . "event_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'event_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'connector_id'}) {
        my $_base_variable = "{" . "connector_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'connector_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EventConnector1', $response);
    return $_response_object;
}

#
# find_event_connectors
#
# 
# 
# @param string $process_id ID of Process to fetch (required)
# @param string $event_id ID of Task to fetch (required)
# @param int $page Page number to fetch (optional, default to 1)
# @param int $per_page Amount of items per Page (optional, default to 15)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of Process to fetch',
        required => '1',
    },
    'event_id' => {
        data_type => 'string',
        description => 'ID of Task to fetch',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Page number to fetch',
        required => '0',
    },
    'per_page' => {
        data_type => 'int',
        description => 'Amount of items per Page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_event_connectors' } = { 
    	summary => '',
        params => $params,
        returns => 'EventConnectorsCollection',
        };
}
# @return EventConnectorsCollection
#
sub find_event_connectors {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling find_event_connectors");
    }

    # verify the required parameter 'event_id' is set
    unless (exists $args{'event_id'}) {
      croak("Missing the required parameter 'event_id' when calling find_event_connectors");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/events/{event_id}/connectors';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'per_page'}) {
        $query_params->{'per_page'} = $self->{api_client}->to_query_value($args{'per_page'});
    }

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'event_id'}) {
        my $_base_variable = "{" . "event_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'event_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EventConnectorsCollection', $response);
    return $_response_object;
}

#
# find_events
#
# 
# 
# @param string $process_id ID of process related to the event (required)
# @param int $page Page numbers to fetch (optional, default to 1)
# @param int $per_page Amount of items per Page (optional, default to 15)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of process related to the event',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Page numbers to fetch',
        required => '0',
    },
    'per_page' => {
        data_type => 'int',
        description => 'Amount of items per Page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_events' } = { 
    	summary => '',
        params => $params,
        returns => 'EventCollection',
        };
}
# @return EventCollection
#
sub find_events {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling find_events");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/events';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'per_page'}) {
        $query_params->{'per_page'} = $self->{api_client}->to_query_value($args{'per_page'});
    }

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EventCollection', $response);
    return $_response_object;
}

#
# find_flow_by_id
#
# 
# 
# @param string $process_id ID of process to return (required)
# @param string $flow_id ID of flow to return (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of process to return',
        required => '1',
    },
    'flow_id' => {
        data_type => 'string',
        description => 'ID of flow to return',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_flow_by_id' } = { 
    	summary => '',
        params => $params,
        returns => 'FlowItem',
        };
}
# @return FlowItem
#
sub find_flow_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling find_flow_by_id");
    }

    # verify the required parameter 'flow_id' is set
    unless (exists $args{'flow_id'}) {
      croak("Missing the required parameter 'flow_id' when calling find_flow_by_id");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/flows/{flow_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'flow_id'}) {
        my $_base_variable = "{" . "flow_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'flow_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('FlowItem', $response);
    return $_response_object;
}

#
# find_flows
#
# 
# 
# @param string $process_id ID of process related to the flow (required)
# @param int $page Page numbers to fetch (optional, default to 1)
# @param int $per_page Amount of items per Page (optional, default to 15)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of process related to the flow',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Page numbers to fetch',
        required => '0',
    },
    'per_page' => {
        data_type => 'int',
        description => 'Amount of items per Page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_flows' } = { 
    	summary => '',
        params => $params,
        returns => 'FlowCollection',
        };
}
# @return FlowCollection
#
sub find_flows {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling find_flows");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/flows';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'per_page'}) {
        $query_params->{'per_page'} = $self->{api_client}->to_query_value($args{'per_page'});
    }

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('FlowCollection', $response);
    return $_response_object;
}

#
# find_gateway_by_id
#
# 
# 
# @param string $process_id ID of process to return (required)
# @param string $gateway_id ID of gateway to return (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of process to return',
        required => '1',
    },
    'gateway_id' => {
        data_type => 'string',
        description => 'ID of gateway to return',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_gateway_by_id' } = { 
    	summary => '',
        params => $params,
        returns => 'GatewayItem',
        };
}
# @return GatewayItem
#
sub find_gateway_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling find_gateway_by_id");
    }

    # verify the required parameter 'gateway_id' is set
    unless (exists $args{'gateway_id'}) {
      croak("Missing the required parameter 'gateway_id' when calling find_gateway_by_id");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/gateways/{gateway_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'gateway_id'}) {
        my $_base_variable = "{" . "gateway_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'gateway_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GatewayItem', $response);
    return $_response_object;
}

#
# find_gateways
#
# 
# 
# @param string $process_id ID of process related to the gateway (required)
# @param int $page Page number to fetch (optional, default to 1)
# @param int $per_page Amount of items per page (optional, default to 15)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of process related to the gateway',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Page number to fetch',
        required => '0',
    },
    'per_page' => {
        data_type => 'int',
        description => 'Amount of items per page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_gateways' } = { 
    	summary => '',
        params => $params,
        returns => 'GatewayCollection',
        };
}
# @return GatewayCollection
#
sub find_gateways {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling find_gateways");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/gateways';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'per_page'}) {
        $query_params->{'per_page'} = $self->{api_client}->to_query_value($args{'per_page'});
    }

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GatewayCollection', $response);
    return $_response_object;
}

#
# find_group_by_id
#
# 
# 
# @param string $id ID of group to return (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of group to return',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_group_by_id' } = { 
    	summary => '',
        params => $params,
        returns => 'GroupItem',
        };
}
# @return GroupItem
#
sub find_group_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling find_group_by_id");
    }

    # parse inputs
    my $_resource_path = '/groups/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GroupItem', $response);
    return $_response_object;
}

#
# find_groups
#
# 
# 
# @param int $page Page number to fetch (optional, default to 1)
# @param int $per_page Amount of items per Page (optional, default to 15)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Page number to fetch',
        required => '0',
    },
    'per_page' => {
        data_type => 'int',
        description => 'Amount of items per Page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_groups' } = { 
    	summary => '',
        params => $params,
        returns => 'GroupCollection',
        };
}
# @return GroupCollection
#
sub find_groups {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/groups';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'per_page'}) {
        $query_params->{'per_page'} = $self->{api_client}->to_query_value($args{'per_page'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GroupCollection', $response);
    return $_response_object;
}

#
# find_input_output_by_id
#
# 
# 
# @param string $process_id Process ID related to the Input/Output object (required)
# @param string $task_id Task instance ID related to the Input/Output object (required)
# @param string $inputoutput_uid ID of Input/Output to return (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'Process ID related to the Input/Output object',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'Task instance ID related to the Input/Output object',
        required => '1',
    },
    'inputoutput_uid' => {
        data_type => 'string',
        description => 'ID of Input/Output to return',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_input_output_by_id' } = { 
    	summary => '',
        params => $params,
        returns => 'InputOutputItem',
        };
}
# @return InputOutputItem
#
sub find_input_output_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling find_input_output_by_id");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling find_input_output_by_id");
    }

    # verify the required parameter 'inputoutput_uid' is set
    unless (exists $args{'inputoutput_uid'}) {
      croak("Missing the required parameter 'inputoutput_uid' when calling find_input_output_by_id");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'inputoutput_uid'}) {
        my $_base_variable = "{" . "inputoutput_uid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inputoutput_uid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InputOutputItem', $response);
    return $_response_object;
}

#
# find_input_outputs
#
# 
# 
# @param string $process_id Process ID related to Input/Output object (required)
# @param string $task_id Task instance ID related to Input/Output object (required)
# @param int $page Page number to fetch (optional, default to 1)
# @param int $per_page Amount of items per page (optional, default to 15)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'Process ID related to Input/Output object',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'Task instance ID related to Input/Output object',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Page number to fetch',
        required => '0',
    },
    'per_page' => {
        data_type => 'int',
        description => 'Amount of items per page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_input_outputs' } = { 
    	summary => '',
        params => $params,
        returns => 'InputOutputCollection',
        };
}
# @return InputOutputCollection
#
sub find_input_outputs {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling find_input_outputs");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling find_input_outputs");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks/{task_id}/inputoutput';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'per_page'}) {
        $query_params->{'per_page'} = $self->{api_client}->to_query_value($args{'per_page'});
    }

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InputOutputCollection', $response);
    return $_response_object;
}

#
# find_instance_by_id
#
# 
# 
# @param string $process_id ID of process to return (required)
# @param string $instance_id ID of instance to return (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of process to return',
        required => '1',
    },
    'instance_id' => {
        data_type => 'string',
        description => 'ID of instance to return',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_instance_by_id' } = { 
    	summary => '',
        params => $params,
        returns => 'InstanceItem',
        };
}
# @return InstanceItem
#
sub find_instance_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling find_instance_by_id");
    }

    # verify the required parameter 'instance_id' is set
    unless (exists $args{'instance_id'}) {
      croak("Missing the required parameter 'instance_id' when calling find_instance_by_id");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/instances/{instance_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'instance_id'}) {
        my $_base_variable = "{" . "instance_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InstanceItem', $response);
    return $_response_object;
}

#
# find_instances
#
# 
# 
# @param string $process_id Process ID related to the instances (required)
# @param int $page Page number to fetch (optional, default to 1)
# @param int $per_page Amount of items per page (optional, default to 15)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'Process ID related to the instances',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Page number to fetch',
        required => '0',
    },
    'per_page' => {
        data_type => 'int',
        description => 'Amount of items per page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_instances' } = { 
    	summary => '',
        params => $params,
        returns => 'InstanceCollection',
        };
}
# @return InstanceCollection
#
sub find_instances {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling find_instances");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/instances';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'per_page'}) {
        $query_params->{'per_page'} = $self->{api_client}->to_query_value($args{'per_page'});
    }

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InstanceCollection', $response);
    return $_response_object;
}

#
# find_process_by_id
#
# 
# 
# @param string $id ID of process to return (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of process to return',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_process_by_id' } = { 
    	summary => '',
        params => $params,
        returns => 'ProcessItem',
        };
}
# @return ProcessItem
#
sub find_process_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling find_process_by_id");
    }

    # parse inputs
    my $_resource_path = '/processes/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ProcessItem', $response);
    return $_response_object;
}

#
# find_processes
#
# 
# 
# @param int $page Page number to fetch (optional, default to 1)
# @param int $per_page Amount of items per page (optional, default to 15)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Page number to fetch',
        required => '0',
    },
    'per_page' => {
        data_type => 'int',
        description => 'Amount of items per page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_processes' } = { 
    	summary => '',
        params => $params,
        returns => 'ProcessCollection',
        };
}
# @return ProcessCollection
#
sub find_processes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/processes';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'per_page'}) {
        $query_params->{'per_page'} = $self->{api_client}->to_query_value($args{'per_page'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ProcessCollection', $response);
    return $_response_object;
}

#
# find_task_by_id
#
# 
# 
# @param string $process_id ID of process to return (required)
# @param string $task_id ID of task to return (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of process to return',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'ID of task to return',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_task_by_id' } = { 
    	summary => '',
        params => $params,
        returns => 'TaskItem',
        };
}
# @return TaskItem
#
sub find_task_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling find_task_by_id");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling find_task_by_id");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks/{task_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TaskItem', $response);
    return $_response_object;
}

#
# find_task_connector_by_id
#
# 
# 
# @param string $process_id ID of Process to fetch (required)
# @param string $task_id ID of Task to fetch (required)
# @param string $connector_id ID of TaskConnector to fetch (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of Process to fetch',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'ID of Task to fetch',
        required => '1',
    },
    'connector_id' => {
        data_type => 'string',
        description => 'ID of TaskConnector to fetch',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_task_connector_by_id' } = { 
    	summary => '',
        params => $params,
        returns => 'TaskConnector1',
        };
}
# @return TaskConnector1
#
sub find_task_connector_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling find_task_connector_by_id");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling find_task_connector_by_id");
    }

    # verify the required parameter 'connector_id' is set
    unless (exists $args{'connector_id'}) {
      croak("Missing the required parameter 'connector_id' when calling find_task_connector_by_id");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'connector_id'}) {
        my $_base_variable = "{" . "connector_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'connector_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TaskConnector1', $response);
    return $_response_object;
}

#
# find_task_connectors
#
# 
# 
# @param string $process_id ID of Process to fetch (required)
# @param string $task_id ID of Task to fetch (required)
# @param int $page Page number to fetch (optional, default to 1)
# @param int $per_page Amount of items per Page (optional, default to 15)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of Process to fetch',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'ID of Task to fetch',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Page number to fetch',
        required => '0',
    },
    'per_page' => {
        data_type => 'int',
        description => 'Amount of items per Page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_task_connectors' } = { 
    	summary => '',
        params => $params,
        returns => 'TaskConnectorsCollection',
        };
}
# @return TaskConnectorsCollection
#
sub find_task_connectors {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling find_task_connectors");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling find_task_connectors");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks/{task_id}/connectors';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'per_page'}) {
        $query_params->{'per_page'} = $self->{api_client}->to_query_value($args{'per_page'});
    }

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TaskConnectorsCollection', $response);
    return $_response_object;
}

#
# find_task_instance_by_id
#
# 
# 
# @param string $task_instance_id ID of task instance to return (required)
# @param int $page Page number to fetch (optional, default to 1)
# @param int $per_page Amount of items per page (optional, default to 15)
{
    my $params = {
    'task_instance_id' => {
        data_type => 'string',
        description => 'ID of task instance to return',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Page number to fetch',
        required => '0',
    },
    'per_page' => {
        data_type => 'int',
        description => 'Amount of items per page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_task_instance_by_id' } = { 
    	summary => '',
        params => $params,
        returns => 'InlineResponse200',
        };
}
# @return InlineResponse200
#
sub find_task_instance_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'task_instance_id' is set
    unless (exists $args{'task_instance_id'}) {
      croak("Missing the required parameter 'task_instance_id' when calling find_task_instance_by_id");
    }

    # parse inputs
    my $_resource_path = '/task_instances/{task_instance_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'per_page'}) {
        $query_params->{'per_page'} = $self->{api_client}->to_query_value($args{'per_page'});
    }

    # path params
    if ( exists $args{'task_instance_id'}) {
        my $_base_variable = "{" . "task_instance_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_instance_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse200', $response);
    return $_response_object;
}

#
# find_task_instances
#
# 
# 
# @param int $page Page number to fetch (optional, default to 1)
# @param int $per_page Amount of items per page (optional, default to 15)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Page number to fetch',
        required => '0',
    },
    'per_page' => {
        data_type => 'int',
        description => 'Amount of items per page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_task_instances' } = { 
    	summary => '',
        params => $params,
        returns => 'TaskInstanceCollection',
        };
}
# @return TaskInstanceCollection
#
sub find_task_instances {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/task_instances';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'per_page'}) {
        $query_params->{'per_page'} = $self->{api_client}->to_query_value($args{'per_page'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TaskInstanceCollection', $response);
    return $_response_object;
}

#
# find_tasks
#
# 
# 
# @param string $process_id ID of Process relative to task (required)
# @param int $page Page number to fetch (optional, default to 1)
# @param int $per_page Amount of items per Page (optional, default to 15)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of Process relative to task',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Page number to fetch',
        required => '0',
    },
    'per_page' => {
        data_type => 'int',
        description => 'Amount of items per Page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_tasks' } = { 
    	summary => '',
        params => $params,
        returns => 'TaskCollection',
        };
}
# @return TaskCollection
#
sub find_tasks {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling find_tasks");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'per_page'}) {
        $query_params->{'per_page'} = $self->{api_client}->to_query_value($args{'per_page'});
    }

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TaskCollection', $response);
    return $_response_object;
}

#
# find_user_by_id
#
# 
# 
# @param string $id ID of the user to return (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of the user to return',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_user_by_id' } = { 
    	summary => '',
        params => $params,
        returns => 'UserItem',
        };
}
# @return UserItem
#
sub find_user_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling find_user_by_id");
    }

    # parse inputs
    my $_resource_path = '/users/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UserItem', $response);
    return $_response_object;
}

#
# find_users
#
# 
# 
# @param int $page Page number to fetch (optional, default to 1)
# @param int $per_page Amount of items per page (optional, default to 15)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Page number to fetch',
        required => '0',
    },
    'per_page' => {
        data_type => 'int',
        description => 'Amount of items per page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_users' } = { 
    	summary => '',
        params => $params,
        returns => 'UserCollection',
        };
}
# @return UserCollection
#
sub find_users {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/users';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'per_page'}) {
        $query_params->{'per_page'} = $self->{api_client}->to_query_value($args{'per_page'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UserCollection', $response);
    return $_response_object;
}

#
# import_bpmn_file
#
# 
# 
# @param BpmnImportItem $bpmn_import_item JSON API with the BPMN file to import (required)
{
    my $params = {
    'bpmn_import_item' => {
        data_type => 'BpmnImportItem',
        description => 'JSON API with the BPMN file to import',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'import_bpmn_file' } = { 
    	summary => '',
        params => $params,
        returns => 'ProcessCollection1',
        };
}
# @return ProcessCollection1
#
sub import_bpmn_file {
    my ($self, %args) = @_;

    # verify the required parameter 'bpmn_import_item' is set
    unless (exists $args{'bpmn_import_item'}) {
      croak("Missing the required parameter 'bpmn_import_item' when calling import_bpmn_file");
    }

    # parse inputs
    my $_resource_path = '/processes/import';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    my $_body_data;
    # body params
    if ( exists $args{'bpmn_import_item'}) {
        $_body_data = $args{'bpmn_import_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ProcessCollection1', $response);
    return $_response_object;
}

#
# myself_user
#
# 
# 
# @param int $page Page number to fetch (optional, default to 1)
# @param int $per_page Amount of items per page (optional, default to 15)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Page number to fetch',
        required => '0',
    },
    'per_page' => {
        data_type => 'int',
        description => 'Amount of items per page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'myself_user' } = { 
    	summary => '',
        params => $params,
        returns => 'UserItem',
        };
}
# @return UserItem
#
sub myself_user {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/users/myself';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'per_page'}) {
        $query_params->{'per_page'} = $self->{api_client}->to_query_value($args{'per_page'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UserItem', $response);
    return $_response_object;
}

#
# remove_groups_from_task
#
# 
# 
# @param string $process_id Process ID (required)
# @param string $task_id Task ID (required)
# @param TaskRemoveGroupsItem $task_remove_groups_item JSON API response with Groups IDs to remove (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'Process ID',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'Task ID',
        required => '1',
    },
    'task_remove_groups_item' => {
        data_type => 'TaskRemoveGroupsItem',
        description => 'JSON API response with Groups IDs to remove',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'remove_groups_from_task' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub remove_groups_from_task {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling remove_groups_from_task");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling remove_groups_from_task");
    }

    # verify the required parameter 'task_remove_groups_item' is set
    unless (exists $args{'task_remove_groups_item'}) {
      croak("Missing the required parameter 'task_remove_groups_item' when calling remove_groups_from_task");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks/{task_id}/groups';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'task_remove_groups_item'}) {
        $_body_data = $args{'task_remove_groups_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# remove_users_from_group
#
# 
# 
# @param string $id ID of group to be modified (required)
# @param GroupRemoveUsersItem $group_remove_users_item JSON API response with Users IDs to remove (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of group to be modified',
        required => '1',
    },
    'group_remove_users_item' => {
        data_type => 'GroupRemoveUsersItem',
        description => 'JSON API response with Users IDs to remove',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'remove_users_from_group' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub remove_users_from_group {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling remove_users_from_group");
    }

    # verify the required parameter 'group_remove_users_item' is set
    unless (exists $args{'group_remove_users_item'}) {
      croak("Missing the required parameter 'group_remove_users_item' when calling remove_users_from_group");
    }

    # parse inputs
    my $_resource_path = '/groups/{id}/users';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'group_remove_users_item'}) {
        $_body_data = $args{'group_remove_users_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# sync_groups_to_task
#
# 
# 
# @param string $process_id Process ID (required)
# @param string $task_id ID of task to modify (required)
# @param TaskSyncGroupsItem $task_sync_groups_item JSON API response with groups IDs to sync (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'Process ID',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'ID of task to modify',
        required => '1',
    },
    'task_sync_groups_item' => {
        data_type => 'TaskSyncGroupsItem',
        description => 'JSON API response with groups IDs to sync',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sync_groups_to_task' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub sync_groups_to_task {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling sync_groups_to_task");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling sync_groups_to_task");
    }

    # verify the required parameter 'task_sync_groups_item' is set
    unless (exists $args{'task_sync_groups_item'}) {
      croak("Missing the required parameter 'task_sync_groups_item' when calling sync_groups_to_task");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks/{task_id}/groups';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'task_sync_groups_item'}) {
        $_body_data = $args{'task_sync_groups_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# sync_users_to_group
#
# 
# 
# @param string $id ID of group to be modifieded (required)
# @param GroupSyncUsersItem $group_sync_users_item JSON API with array of users IDs to sync (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of group to be modifieded',
        required => '1',
    },
    'group_sync_users_item' => {
        data_type => 'GroupSyncUsersItem',
        description => 'JSON API with array of users IDs to sync',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sync_users_to_group' } = { 
    	summary => '',
        params => $params,
        returns => 'ResultSuccess',
        };
}
# @return ResultSuccess
#
sub sync_users_to_group {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling sync_users_to_group");
    }

    # verify the required parameter 'group_sync_users_item' is set
    unless (exists $args{'group_sync_users_item'}) {
      croak("Missing the required parameter 'group_sync_users_item' when calling sync_users_to_group");
    }

    # parse inputs
    my $_resource_path = '/groups/{id}/users';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'group_sync_users_item'}) {
        $_body_data = $args{'group_sync_users_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResultSuccess', $response);
    return $_response_object;
}

#
# update_client
#
# 
# 
# @param string $user_id ID of user to retrieve (required)
# @param string $client_id ID of client to retrieve (required)
# @param ClientUpdateItem $client_update_item Client object to edit (required)
{
    my $params = {
    'user_id' => {
        data_type => 'string',
        description => 'ID of user to retrieve',
        required => '1',
    },
    'client_id' => {
        data_type => 'string',
        description => 'ID of client to retrieve',
        required => '1',
    },
    'client_update_item' => {
        data_type => 'ClientUpdateItem',
        description => 'Client object to edit',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_client' } = { 
    	summary => '',
        params => $params,
        returns => 'ClientItem',
        };
}
# @return ClientItem
#
sub update_client {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling update_client");
    }

    # verify the required parameter 'client_id' is set
    unless (exists $args{'client_id'}) {
      croak("Missing the required parameter 'client_id' when calling update_client");
    }

    # verify the required parameter 'client_update_item' is set
    unless (exists $args{'client_update_item'}) {
      croak("Missing the required parameter 'client_update_item' when calling update_client");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/clients/{client_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'client_id'}) {
        my $_base_variable = "{" . "client_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'client_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'client_update_item'}) {
        $_body_data = $args{'client_update_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ClientItem', $response);
    return $_response_object;
}

#
# update_event
#
# 
# 
# @param string $process_id ID of process to retrieve (required)
# @param string $event_id ID of event to retrieve (required)
# @param EventUpdateItem $event_update_item Event object to edit (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of process to retrieve',
        required => '1',
    },
    'event_id' => {
        data_type => 'string',
        description => 'ID of event to retrieve',
        required => '1',
    },
    'event_update_item' => {
        data_type => 'EventUpdateItem',
        description => 'Event object to edit',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_event' } = { 
    	summary => '',
        params => $params,
        returns => 'EventItem',
        };
}
# @return EventItem
#
sub update_event {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling update_event");
    }

    # verify the required parameter 'event_id' is set
    unless (exists $args{'event_id'}) {
      croak("Missing the required parameter 'event_id' when calling update_event");
    }

    # verify the required parameter 'event_update_item' is set
    unless (exists $args{'event_update_item'}) {
      croak("Missing the required parameter 'event_update_item' when calling update_event");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/events/{event_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'event_id'}) {
        my $_base_variable = "{" . "event_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'event_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'event_update_item'}) {
        $_body_data = $args{'event_update_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EventItem', $response);
    return $_response_object;
}

#
# update_event_connector
#
# 
# 
# @param string $process_id ID of Process to fetch (required)
# @param string $event_id ID of Event to fetch (required)
# @param string $connector_id ID of Event Connector to fetch (required)
# @param EventConnectorUpdateItem $event_connector_update_item EventConnector object to edit (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of Process to fetch',
        required => '1',
    },
    'event_id' => {
        data_type => 'string',
        description => 'ID of Event to fetch',
        required => '1',
    },
    'connector_id' => {
        data_type => 'string',
        description => 'ID of Event Connector to fetch',
        required => '1',
    },
    'event_connector_update_item' => {
        data_type => 'EventConnectorUpdateItem',
        description => 'EventConnector object to edit',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_event_connector' } = { 
    	summary => '',
        params => $params,
        returns => 'EventConnector1',
        };
}
# @return EventConnector1
#
sub update_event_connector {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling update_event_connector");
    }

    # verify the required parameter 'event_id' is set
    unless (exists $args{'event_id'}) {
      croak("Missing the required parameter 'event_id' when calling update_event_connector");
    }

    # verify the required parameter 'connector_id' is set
    unless (exists $args{'connector_id'}) {
      croak("Missing the required parameter 'connector_id' when calling update_event_connector");
    }

    # verify the required parameter 'event_connector_update_item' is set
    unless (exists $args{'event_connector_update_item'}) {
      croak("Missing the required parameter 'event_connector_update_item' when calling update_event_connector");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/events/{event_id}/connectors/{connector_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'event_id'}) {
        my $_base_variable = "{" . "event_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'event_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'connector_id'}) {
        my $_base_variable = "{" . "connector_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'connector_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'event_connector_update_item'}) {
        $_body_data = $args{'event_connector_update_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EventConnector1', $response);
    return $_response_object;
}

#
# update_flow
#
# 
# 
# @param string $process_id ID of process to retrieve (required)
# @param string $flow_id ID of flow to retrieve (required)
# @param FlowUpdateItem $flow_update_item Flow object to edit (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of process to retrieve',
        required => '1',
    },
    'flow_id' => {
        data_type => 'string',
        description => 'ID of flow to retrieve',
        required => '1',
    },
    'flow_update_item' => {
        data_type => 'FlowUpdateItem',
        description => 'Flow object to edit',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_flow' } = { 
    	summary => '',
        params => $params,
        returns => 'FlowItem',
        };
}
# @return FlowItem
#
sub update_flow {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling update_flow");
    }

    # verify the required parameter 'flow_id' is set
    unless (exists $args{'flow_id'}) {
      croak("Missing the required parameter 'flow_id' when calling update_flow");
    }

    # verify the required parameter 'flow_update_item' is set
    unless (exists $args{'flow_update_item'}) {
      croak("Missing the required parameter 'flow_update_item' when calling update_flow");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/flows/{flow_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'flow_id'}) {
        my $_base_variable = "{" . "flow_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'flow_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'flow_update_item'}) {
        $_body_data = $args{'flow_update_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('FlowItem', $response);
    return $_response_object;
}

#
# update_gateway
#
# 
# 
# @param string $process_id ID of process to retrieve (required)
# @param string $gateway_id ID of gateway to retrieve (required)
# @param GatewayUpdateItem $gateway_update_item Gateway object to edit (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of process to retrieve',
        required => '1',
    },
    'gateway_id' => {
        data_type => 'string',
        description => 'ID of gateway to retrieve',
        required => '1',
    },
    'gateway_update_item' => {
        data_type => 'GatewayUpdateItem',
        description => 'Gateway object to edit',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_gateway' } = { 
    	summary => '',
        params => $params,
        returns => 'GatewayItem',
        };
}
# @return GatewayItem
#
sub update_gateway {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling update_gateway");
    }

    # verify the required parameter 'gateway_id' is set
    unless (exists $args{'gateway_id'}) {
      croak("Missing the required parameter 'gateway_id' when calling update_gateway");
    }

    # verify the required parameter 'gateway_update_item' is set
    unless (exists $args{'gateway_update_item'}) {
      croak("Missing the required parameter 'gateway_update_item' when calling update_gateway");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/gateways/{gateway_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'gateway_id'}) {
        my $_base_variable = "{" . "gateway_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'gateway_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'gateway_update_item'}) {
        $_body_data = $args{'gateway_update_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GatewayItem', $response);
    return $_response_object;
}

#
# update_group
#
# 
# 
# @param string $id ID of group to retrieve (required)
# @param GroupUpdateItem $group_update_item Group object to edit (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of group to retrieve',
        required => '1',
    },
    'group_update_item' => {
        data_type => 'GroupUpdateItem',
        description => 'Group object to edit',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_group' } = { 
    	summary => '',
        params => $params,
        returns => 'GroupItem',
        };
}
# @return GroupItem
#
sub update_group {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_group");
    }

    # verify the required parameter 'group_update_item' is set
    unless (exists $args{'group_update_item'}) {
      croak("Missing the required parameter 'group_update_item' when calling update_group");
    }

    # parse inputs
    my $_resource_path = '/groups/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'group_update_item'}) {
        $_body_data = $args{'group_update_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GroupItem', $response);
    return $_response_object;
}

#
# update_input_output
#
# 
# 
# @param string $process_id Process ID related to the Input/Output object (required)
# @param string $task_id Task instance ID related to the Input/Output object (required)
# @param string $inputoutput_uid ID of Input/Output to retrieve (required)
# @param InputOutputUpdateItem $input_output_update_item Input/Output object to edit (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'Process ID related to the Input/Output object',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'Task instance ID related to the Input/Output object',
        required => '1',
    },
    'inputoutput_uid' => {
        data_type => 'string',
        description => 'ID of Input/Output to retrieve',
        required => '1',
    },
    'input_output_update_item' => {
        data_type => 'InputOutputUpdateItem',
        description => 'Input/Output object to edit',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_input_output' } = { 
    	summary => '',
        params => $params,
        returns => 'InputOutputItem',
        };
}
# @return InputOutputItem
#
sub update_input_output {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling update_input_output");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling update_input_output");
    }

    # verify the required parameter 'inputoutput_uid' is set
    unless (exists $args{'inputoutput_uid'}) {
      croak("Missing the required parameter 'inputoutput_uid' when calling update_input_output");
    }

    # verify the required parameter 'input_output_update_item' is set
    unless (exists $args{'input_output_update_item'}) {
      croak("Missing the required parameter 'input_output_update_item' when calling update_input_output");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'inputoutput_uid'}) {
        my $_base_variable = "{" . "inputoutput_uid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inputoutput_uid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'input_output_update_item'}) {
        $_body_data = $args{'input_output_update_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InputOutputItem', $response);
    return $_response_object;
}

#
# update_instance
#
# 
# 
# @param string $process_id ID of Process to retrieve (required)
# @param string $instance_id ID of Instance to retrieve (required)
# @param InstanceUpdateItem $instance_update_item Instance object to edit (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of Process to retrieve',
        required => '1',
    },
    'instance_id' => {
        data_type => 'string',
        description => 'ID of Instance to retrieve',
        required => '1',
    },
    'instance_update_item' => {
        data_type => 'InstanceUpdateItem',
        description => 'Instance object to edit',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_instance' } = { 
    	summary => '',
        params => $params,
        returns => 'InstanceItem',
        };
}
# @return InstanceItem
#
sub update_instance {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling update_instance");
    }

    # verify the required parameter 'instance_id' is set
    unless (exists $args{'instance_id'}) {
      croak("Missing the required parameter 'instance_id' when calling update_instance");
    }

    # verify the required parameter 'instance_update_item' is set
    unless (exists $args{'instance_update_item'}) {
      croak("Missing the required parameter 'instance_update_item' when calling update_instance");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/instances/{instance_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'instance_id'}) {
        my $_base_variable = "{" . "instance_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'instance_update_item'}) {
        $_body_data = $args{'instance_update_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InstanceItem', $response);
    return $_response_object;
}

#
# update_process
#
# 
# 
# @param string $id ID of process to retrieve (required)
# @param ProcessUpdateItem $process_update_item Process object to edit (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of process to retrieve',
        required => '1',
    },
    'process_update_item' => {
        data_type => 'ProcessUpdateItem',
        description => 'Process object to edit',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_process' } = { 
    	summary => '',
        params => $params,
        returns => 'ProcessItem',
        };
}
# @return ProcessItem
#
sub update_process {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_process");
    }

    # verify the required parameter 'process_update_item' is set
    unless (exists $args{'process_update_item'}) {
      croak("Missing the required parameter 'process_update_item' when calling update_process");
    }

    # parse inputs
    my $_resource_path = '/processes/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'process_update_item'}) {
        $_body_data = $args{'process_update_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ProcessItem', $response);
    return $_response_object;
}

#
# update_task
#
# 
# 
# @param string $process_id ID of Process to fetch (required)
# @param string $task_id ID of Task to fetch (required)
# @param TaskUpdateItem $task_update_item Task object to edit (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of Process to fetch',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'ID of Task to fetch',
        required => '1',
    },
    'task_update_item' => {
        data_type => 'TaskUpdateItem',
        description => 'Task object to edit',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_task' } = { 
    	summary => '',
        params => $params,
        returns => 'TaskItem',
        };
}
# @return TaskItem
#
sub update_task {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling update_task");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling update_task");
    }

    # verify the required parameter 'task_update_item' is set
    unless (exists $args{'task_update_item'}) {
      croak("Missing the required parameter 'task_update_item' when calling update_task");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks/{task_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'task_update_item'}) {
        $_body_data = $args{'task_update_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TaskItem', $response);
    return $_response_object;
}

#
# update_task_connector
#
# 
# 
# @param string $process_id ID of Process to fetch (required)
# @param string $task_id ID of Task to fetch (required)
# @param string $connector_id ID of Task Connector to fetch (required)
# @param TaskConnectorUpdateItem $task_connector_update_item TaskConnector object to edit (required)
{
    my $params = {
    'process_id' => {
        data_type => 'string',
        description => 'ID of Process to fetch',
        required => '1',
    },
    'task_id' => {
        data_type => 'string',
        description => 'ID of Task to fetch',
        required => '1',
    },
    'connector_id' => {
        data_type => 'string',
        description => 'ID of Task Connector to fetch',
        required => '1',
    },
    'task_connector_update_item' => {
        data_type => 'TaskConnectorUpdateItem',
        description => 'TaskConnector object to edit',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_task_connector' } = { 
    	summary => '',
        params => $params,
        returns => 'TaskConnector1',
        };
}
# @return TaskConnector1
#
sub update_task_connector {
    my ($self, %args) = @_;

    # verify the required parameter 'process_id' is set
    unless (exists $args{'process_id'}) {
      croak("Missing the required parameter 'process_id' when calling update_task_connector");
    }

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling update_task_connector");
    }

    # verify the required parameter 'connector_id' is set
    unless (exists $args{'connector_id'}) {
      croak("Missing the required parameter 'connector_id' when calling update_task_connector");
    }

    # verify the required parameter 'task_connector_update_item' is set
    unless (exists $args{'task_connector_update_item'}) {
      croak("Missing the required parameter 'task_connector_update_item' when calling update_task_connector");
    }

    # parse inputs
    my $_resource_path = '/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'process_id'}) {
        my $_base_variable = "{" . "process_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'process_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'connector_id'}) {
        my $_base_variable = "{" . "connector_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'connector_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'task_connector_update_item'}) {
        $_body_data = $args{'task_connector_update_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TaskConnector1', $response);
    return $_response_object;
}

#
# update_task_instance
#
# 
# 
# @param string $task_instance_id ID of task instance to retrieve (required)
# @param TaskInstanceUpdateItem $task_instance_update_item Task Instance object to update (required)
{
    my $params = {
    'task_instance_id' => {
        data_type => 'string',
        description => 'ID of task instance to retrieve',
        required => '1',
    },
    'task_instance_update_item' => {
        data_type => 'TaskInstanceUpdateItem',
        description => 'Task Instance object to update',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_task_instance' } = { 
    	summary => '',
        params => $params,
        returns => 'InlineResponse200',
        };
}
# @return InlineResponse200
#
sub update_task_instance {
    my ($self, %args) = @_;

    # verify the required parameter 'task_instance_id' is set
    unless (exists $args{'task_instance_id'}) {
      croak("Missing the required parameter 'task_instance_id' when calling update_task_instance");
    }

    # verify the required parameter 'task_instance_update_item' is set
    unless (exists $args{'task_instance_update_item'}) {
      croak("Missing the required parameter 'task_instance_update_item' when calling update_task_instance");
    }

    # parse inputs
    my $_resource_path = '/task_instances/{task_instance_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'task_instance_id'}) {
        my $_base_variable = "{" . "task_instance_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_instance_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'task_instance_update_item'}) {
        $_body_data = $args{'task_instance_update_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse200', $response);
    return $_response_object;
}

#
# update_user
#
# 
# 
# @param string $id ID of user to retrieve (required)
# @param UserUpdateItem $user_update_item User object for update (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of user to retrieve',
        required => '1',
    },
    'user_update_item' => {
        data_type => 'UserUpdateItem',
        description => 'User object for update',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_user' } = { 
    	summary => '',
        params => $params,
        returns => 'UserItem',
        };
}
# @return UserItem
#
sub update_user {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_user");
    }

    # verify the required parameter 'user_update_item' is set
    unless (exists $args{'user_update_item'}) {
      croak("Missing the required parameter 'user_update_item' when calling update_user");
    }

    # parse inputs
    my $_resource_path = '/users/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.api+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/vnd.api+json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'user_update_item'}) {
        $_body_data = $args{'user_update_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(PasswordGrant )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UserItem', $response);
    return $_response_object;
}

1;
